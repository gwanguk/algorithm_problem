#include <iostream>
#include <algorithm>
#include <functional>
#include <stdio.h>

using namespace std;

int house[501];
int trash[501];
int cut[501];

struct Set {
	int index;
	int length;
};

struct Set sets[500];

int compare(const void * p1, const void * p2)
{
	Set * s1 = (Set *)p1;
	Set * s2 = (Set *)p2;
	return s2->length - s1->length;
}

int calc(int * house, int cnt)
{
	int sum = 0;
	int mid_position;

	mid_position = house[cnt / 2];

	for (int i = 0; i < cnt; i++)
	{
		sum += abs(house[i] - mid_position);
	}
	return sum;
}


int main(void) {


	int T;
	int test_case;
	int N;
	int M;

	cin >> T;
	for (test_case = 1; test_case <= T; test_case++) {
		cin >> N;
		cin >> M;
		int cnt = 0;
		for (int i = 0; i < N; i++)
		{
			cin>>house[i];
		}
		sort(house, house + N);
		int sum = 0;
		int cur_index = 0;
		if(M==1)
			sum = calc(house, N);
		else if (M > 1)
		{
			for (int i = 0; i < N - 1; i++)
			{
				sets[i].index = i;
				sets[i].length = house[i + 1] - house[i];
			}
			qsort(sets, N - 1, sizeof(Set), compare);
			for (int j = 0; j < N-1; j++)
				cut[j] = sets[j].index;
			sort(cut, cut + M-1);
			cut[M-1] = N - 1;

			for (int i = 0; i < M; i++)
			{
				if (i == 0)
				{
					cnt = cut[i] + 1;
					sum += calc(house, cnt);
				}
				else if (i > 0)
				{
					cnt = cut[i] - cut[i - 1];
					sum += calc(house + cut[i - 1] + 1, cnt);
				}
			}
		}

		printf("Case #%d\n", test_case);
		cout << sum << endl;
	}
	
	return 0;	// 정상종료 시 반드시 0을 리턴해야 합니다.
}
