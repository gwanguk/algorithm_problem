#include <cstdio>
#include <iostream>
#include <math.h>
#include <algorithm>
#include <queue>
using namespace std;
int map[1001][1001];
struct Point {
	int m;
	int n;
};
queue<Point> infector;
int M, N;

int check(int m, int n)
{
	if (m >= 0 && m < M&&n>=0 && n < N)
		return 1;
	else
		return 0;
}

int main(int argc, char** argv) {
	//setbuf(stdout, NULL);
	cin >> M; cin >> N;
	int start_m;
	int start_n;
	int cnt = 0;
	for (int n = 0; n < N; n++)
	{
		for (int m = 0; m < M; m++)
		{
			int tmp;
			cin >> tmp;
			map[n][m]=tmp;
			if (tmp == 1)
			{
				infector.push(Point{ m,n });
			}
		}
	}

	Point cur;
	int timer = 0;
	while (infector.size()>0)
	{
		cur = infector.front();
		infector.pop();
		//상
		if (check(cur.m, cur.n - 1) == 1 && map[cur.n-1][cur.m] == 0)
		{
			map[cur.n-1][cur.m]=map[cur.n][cur.m]+1;
			infector.push(Point{ cur.m,cur.n - 1 });
		}
		if (check(cur.m, cur.n + 1) == 1 && map[cur.n+1][cur.m] == 0)
		{
			map[cur.n + 1][cur.m] = map[cur.n][cur.m] + 1;
			infector.push(Point{ cur.m,cur.n + 1 });
		}
		if (check(cur.m-1, cur.n) == 1 && map[cur.n][cur.m-1] == 0)
		{
			map[cur.n][cur.m-1] = map[cur.n][cur.m] + 1;
			infector.push(Point{ cur.m-1,cur.n });
		}
		if (check(cur.m+1, cur.n ) == 1 && map[cur.n][cur.m+1] == 0)
		{
			map[cur.n][cur.m+1] = map[cur.n][cur.m] + 1;
			infector.push(Point{ cur.m+1,cur.n });
		}
		//하
		//좌
		//우
	}

	int ret = -1;
	int max = -1;
	for (int n = 0; n < N; n++)
	{
		for (int m = 0; m < M; m++)
		{
			if (map[n][m] == 0)
			{
				cout << -1 << endl;
				return 0;
			}
			if (max < map[n][m])
				max = map[n][m];
		}
	}

	cout << max-1 << endl;
	return 0;	// 정상종료 시 반드시 0을 리턴해야 합니다.
}
