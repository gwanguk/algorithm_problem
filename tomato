#include <cstdio>
#include <iostream>

using namespace std;

int table[1001][1001];

struct POINT {
	int m;
	int n;
	int time;
	POINT()
	{
		m = 0;
		n = 0;
		time = 0;
	}
};

struct POINT queue[10000000];

int main(int argc, char** argv) {

	int M, N;

	cin >> M;
	cin >> N;

	int head = 0;
	int tail = 0;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cin >> table[i][j];
		}
	}

	int already = 1;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if (table[i][j] == 0)
				already = 0;
		}
	}
	if (already == 1)
	{
		cout << 0 << endl;
		return 0;
	}


	//start find
	struct POINT start;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if (table[i][j] == 1)
			{
				queue[head].m = j;
				queue[head].n = i;
				queue[head].time = 0;
				head++;
			}
		}
	}

	int time = 0;

	while (head - tail>0)
	{
		int cur_m = queue[tail].m;
		int cur_n = queue[tail].n;
		int cur_time = queue[tail].time;
		tail++;

		if (time < cur_time)
			time = cur_time;

		if (cur_n - 1 >= 0 && table[cur_n - 1][cur_m] == 0)
		{
			table[cur_n - 1][cur_m] = 1;
			queue[head].m = cur_m;
			queue[head].n = cur_n - 1;
			queue[head].time = cur_time + 1;
			head++;
		}

		if (cur_n + 1 < N && table[cur_n + 1][cur_m] == 0)
		{
			table[cur_n + 1][cur_m] = 1;
			queue[head].m = cur_m;
			queue[head].n = cur_n + 1;
			queue[head].time = cur_time + 1;
			head++;
		}

		if (cur_m + 1 < M && table[cur_n][cur_m + 1] == 0)
		{
			table[cur_n][cur_m + 1] = 1;
			queue[head].m = cur_m + 1;
			queue[head].n = cur_n;
			queue[head].time = cur_time + 1;
			head++;
		}

		if (cur_m - 1 >= 0 && table[cur_n][cur_m - 1] == 0)
		{
			table[cur_n][cur_m - 1] = 1;
			queue[head].m = cur_m - 1;
			queue[head].n = cur_n;
			queue[head].time = cur_time + 1;
			head++;
		}

	}

	int notComplete = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if (table[i][j] == 0)
				notComplete = 1;
		}
	}


	if (notComplete == 1)
		cout << -1 << endl;
	else
		cout << time << endl;

	return 0;	// 정상종료 시 반드시 0을 리턴해야 합니다.
}
