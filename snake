#include <iostream>
#include <algorithm>
#include <functional>
#include <stdio.h>

using namespace std;

typedef struct Point {
	int i;
	int j;
};

int N;
int K;
int map[101][101];
int apple[101][101];
char control[101];

int aaa[] = { -1,0,1,0 };
int bbb[] = { 0,1,0,-1 };

int main(void) {
	int position_cur;
	int tail_cur;
	cin >> N;
	cin >> K;

	for (int m = 0; m <= N; m++)
	{
		for (int n = 0; n <= N; n++)
		{
			map[m][n] = -1;
			apple[m][n] = 0;
		}
	}
	for (int n = 0; n < K; n++)
	{
		int i, j;
		cin >> i;
		cin >> j;
		apple[i][j] = 1;
	}
	int L;
	cin >> L;
	for (int i = 0; i < L; i++)
		control[i] = 0;
	for (int n = 0; n < L; n++)
	{
		int a; char b;
		cin >> a;
		cin >> b;
		control[a] = b;
	}
	
	map[1][1] = 0;
	position_cur = 1;
	tail_cur = 1;
	Point position = { 1,1 };
	Point tail = { 1,1 };
	int seconds = 0;

	while (1)
	{
		seconds++;
		position.i += aaa[position_cur];
		position.j += bbb[position_cur];

		if (position.i < 1 || position.i>N)
			break;
		if (position.j < 1 || position.j>N)
			break;
		if (map[position.i][position.j]>-1)
			break;

		map[position.i][position.j] = seconds;
		if (control[seconds]=='L')
			position_cur = ((position_cur + 3) % 4);
		else if (control[seconds] == 'D')
			position_cur = ((position_cur + 1) % 4);

		if (apple[position.i][position.j] == 0)
		{
			if (control[map[tail.i][tail.j]] == 'L')
				tail_cur = ((tail_cur + 3) % 4);
			else if (control[map[tail.i][tail.j]] == 'D')
				tail_cur = ((tail_cur + 1) % 4);
			map[tail.i][tail.j] = -1;
			tail.i += aaa[tail_cur];
			tail.j += bbb[tail_cur];
		}
		else
		{
			apple[position.i][position.j] = 0;
		}
	}
	cout << seconds<<endl;
	return 0;	// 정상종료 시 반드시 0을 리턴해야 합니다.
}
