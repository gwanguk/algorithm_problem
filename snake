#include <iostream>
#include <algorithm>
#include <functional>
#include <stdio.h>
#include <queue>

using namespace std;

typedef struct Point {
	int i;
	int j;
};
queue<Point> snake;
int N;
int K;
int map[101][101];
char control[101] = { 0 };

int dy[] = { -1,0,1,0 };
int dx[] = { 0,1,0,-1 };
int position_cur;
int tail_cur;
int L;

int main(void) {

	cin >> N;
	cin >> K;

	for (int m = 1; m <= N; m++)
	{
		for (int n = 1; n <= N; n++)
		{
			map[m][n] = 0;
		}
	}
	for (int n = 0; n < K; n++)
	{
		int i, j;
		cin >> i;
		cin >> j;
		map[i][j] = 2;
	}
	cin >> L;
	for (int n = 0; n < L; n++)
	{
		int a; char b;
		cin >> a;
		cin >> b;
		control[a] = b;
	}

	map[1][1] = 1;
	position_cur = 1;
	tail_cur = 1;
	Point position = { 1,1 };
	Point tail = { 1,1 };
	int seconds = 0;
	snake.push(Point{ 1, 1 });

	while (1)
	{
		seconds++;
		position.i += dy[position_cur];
		position.j += dx[position_cur];

		if (position.i < 1 || position.i>N || position.j < 1 || position.j>N)
			break;
		if (map[position.i][position.j]==1)
			break;

		if (map[position.i][position.j] == 0)
		{
			map[position.i][position.j] = 1;
			snake.push(Point{ position.i,position.j });
			map[snake.front().i][snake.front().j] = 0;
			if(!snake.empty())
			snake.pop();
		}
		else if (map[position.i][position.j] == 2)
		{
			map[position.i][position.j] = 1;
			snake.push(Point{ position.i,position.j });
		}

		if (control[seconds] == 'L')
			position_cur = ((position_cur + 3) % 4);
		else if (control[seconds] == 'D')
			position_cur = ((position_cur + 1) % 4);

	}

	cout << seconds << endl;
	return 0;	// 정상종료 시 반드시 0을 리턴해야 합니다.
}
