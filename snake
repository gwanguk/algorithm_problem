#include <iostream>
#include <algorithm>
#include <functional>
#include <stdio.h>

using namespace std;

typedef struct Point {
	int i;
	int j;
};

int N;
int K;
int map[101][101];
int apple[101][101];
char control[101];

Point Up = { -1,0 };//1
Point Down = { +1,0 };//2
Point Left = { 0,-1 };//3
Point Right = { 0,+1 };//4

Point int2dir(int a)
{
	if (a == 1)
		return Up;
	else if (a == 2)
		return Down;
	else if (a == 3)
		return Left;
	else
		return Right;
}
int dir2int(Point a)
{
	if (a.i==-1&&a.j==0)
		return 1;
	else if (a.i == 1 && a.j == 0)
		return 2;
	else if (a.i == 0 && a.j == -1)
		return 3;
	else
		return 4;
}

int Turn(int cur, char L) {
	if (cur == 1)
	{
		if (L == 'L')
			return 3;
		else
			return 4;
	}
	else if (cur == 2)
	{
		if (L == 'L')
			return 4;
		else
			return 3;
	}
	else if (cur == 3)
	{
		if (L == 'L')
			return 2;
		else
			return 1;
	}
	else if (cur == 4)
	{
		if (L == 'L')
			return 1;
		else
			return 2;
	}
}

int main(void) {
	Point position_cur;
	Point tail_cur;
	cin >> N;
	cin >> K;

	for (int m = 0; m <= N; m++)
	{
		for (int n = 0; n <= N; n++)
		{
			map[m][n] = -1;
			apple[m][m] = 0;
		}
	}
	for (int n = 0; n < K; n++)
	{
		int i, j;
		cin >> i;
		cin >> j;
		apple[i][j] = 1;
	}
	int L;
	cin >> L;
	for (int i = 0; i < L; i++)
		control[i] = 0;
	for (int n = 0; n < L; n++)
	{
		int a; char b;
		cin >> a;
		cin >> b;
		control[a] = b;
	}
	

	map[1][1] = 0;

	position_cur = Right;
	tail_cur = Right;
	Point position = { 1,1 };
	Point tail = { 1,1 };
	int seconds = 0;

	while (1)
	{
		seconds++;
		position.i += position_cur.i;
		position.j += position_cur.j;

		if (position.i < 1 || position.i>N)
			break;
		if (position.j < 1 || position.j>N)
			break;
		if (map[position.i][position.j] >-1)
			break;

		map[position.i][position.j] = seconds;
		if (control[seconds] != 0)
			position_cur = int2dir(Turn(dir2int(position_cur), control[seconds]));


		if (apple[position.i][position.j] == 0)
		{
			if (control[map[tail.i][tail.j]] != 0)
				tail_cur = int2dir(Turn(dir2int(tail_cur), control[map[tail.i][tail.j]]));
			map[tail.i][tail.j] = -1;
			tail.i += tail_cur.i;
			tail.j += tail_cur.j;
		}
		else
		{
			apple[position.i][position.j] = 1;
		}
	}
	cout << seconds<<endl;
	return 0;	// 정상종료 시 반드시 0을 리턴해야 합니다.
}
